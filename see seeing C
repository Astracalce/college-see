//For better readability, kindly turn on the softwrap above (right corner).

What is C?

C is a general-purpose, procedural, high-level programming language used in the development of computer software and applications, system programming, games, web development, and more. C language was developed by Dennis M. Ritchie at the Bell Telephone Laboratories in 1972. It is a powerful and flexible language which was first developed for the programming of the UNIX operating System. C is one of the most widely used programming language.

C programming language is known for its simplicity and efficiency. It is the best choice to start with programming as it gives you a foundational understanding of programming.




      //Why Learn C?//

C programming language is one of the most popular programming language. It is a must learn for software engineering students. C is called the mother of all modern programming languages so learning C will help you to learn other languages easily like Java, C++, C#, Python, etc. C language is faster than other programming languages like Java and Python. It can handle low-level programming and we can compile the C code in a variety of computer platforms.

List of some key advantages of C language:

    Easy to learn.
    Versatile Language, which can be used in both applications and technologies.
    Mid-Level Programming Language.
    Structured Programming Language.


    

          //Features of C Language//

There are some key features of C language that show the ability and power of C language:

    Simplicity and Efficiency: The simple syntax and structured approach make the C language easy to learn.
    Fast Speed: C is one of the fastest programming language because C is a static programming language, which is faster than dynamic languages like Java and Python. C is also a compiler-based which is the reason for faster code compilation and execution.
    Portable: C provides the feature that you write code once and run it anywhere on any computer. It shows the machine-independent nature of the C language.
    Memory Management: C provides lower level memory management using pointers and functions like realloc(), free(), etc.
    Pointers: C comes with pointers. Through pointers, we can directly access or interact with the memory. We can initialize a pointer as an array, variables, etc.
    Structured Language: C provides the features of structural programming that allows you to code into different parts using functions which can be stored as libraries for reusability.




          // Applications of C Language//

C was used in programs that were used in making operating systems. C was known as a system development language because the code written in C runs as fast as the code written in assembly language.

The use of C is given below:

    Operating Systems
    Language Compilers
    Assemblers
    Text Editors
    Print Spoolers
    Network Drivers
    Modern Programs
    Databases
    Language Interpreters
    Utilities



                  //behind the scenes of C

The compilation is the process of converting the source code of the C language into machine code. As C is a mid-level language, it needs a compiler to convert it into an executable code so that the program can be run on our machine.

The C program goes through the following phases during compilation:

1)source file
2)preprocessor
3)compiler 
4)assembler 
5)linker

// What goes inside the compilation process?

A compiler converts a C program into an executable. There are four phases for a C program to become an executable: 

   1) Pre-processing

1. Pre-processing

This is the first phase through which source code is passed. This phase includes:

    Removal of Comments
    Expansion of Macros
    Expansion of the included files.
    Conditional compilation

The preprocessed output is stored in the filename.i. Let’s see what’s inside filename.i: using $vi filename.i 

In the above output, the source file is filled with lots and lots of info, but in the end, our code is preserved. 

    printf contains now a + b rather than add(a, b) that’s because macros have expanded.
    Comments are stripped off.
    #include<stdio.h> is missing instead we see lots of code. So header files have been expanded and included in our source file.

    2) Compilation
The next step is to compile filename.i and produce an; intermediate compiled output file filename.s. This file is in assembly-level instructions. Let’s see through this file using $nano filename.s  terminal command.

    3)Assembly
In this phase the filename.s is taken as input and turned into filename.o by the assembler. This file contains machine-level instructions. At this phase, only existing code is converted into machine language, and the function calls like printf() are not resolved. Let’s view this file using $vi filename.o 

    4)Linking
This is the final phase in which all the linking of function calls with their definitions is done. Linker knows where all these functions are implemented. Linker does some extra work also, it adds some extra code to our program which is required when the program starts and ends. For example, there is a code that is required for setting up the environment like passing command line arguments. This task can be easily verified by using $size filename.o and $size filename. Through these commands, we know how the output file increases from an object file to an executable file. This is because of the extra code that Linker adds to our program. 

//comments in C :
The comments in C are human-readable explanations or notes in the source code of a C program.  A comment makes the program easier to read and understand. These are the statements that are not executed by the compiler or an interpreter.

It is considered to be a good practice to document our code using comments.
When and Why to use Comments in C programming?

    A person reading a large code will be bemused if comments are not provided about details of the program.
    C Comments are a way to make a code more readable by providing more descriptions.
    C Comments can include a description of an algorithm to make code understandable.
    C Comments can be used to prevent the execution of some parts of the code.

Types of comments in C

In C there are two types of comments in C language:

    Single-line comment:
1. Single-line Comment in C

A single-line comment in C starts with ( // ) double forward slash. It extends till the end of the line and we don’t need to specify its end.
Syntax of Single Line C Comment (//this is a comment).

    Multi-line comment:2. Multi-line Comment in C

The Multi-line comment in C starts with a forward slash and asterisk ( /* ) and ends with an asterisk and forward slash ( */ ). Any text between /* and */ is treated as a comment and is ignored by the compiler.

It can apply comments to multiple lines in the program.
Syntax of Multi-Line C Comment /* this is .......comment*/



                  Program for reversing a number :

//prerequisite : you need to have some background knowledge of place values.
#include<stdio.h>

int main (){
 
    int n,d1,d2,d3,d4,d5,reverse ;
    
    printf("Enter the five digit munber : ");
    scanf("%d", &n);
     
     d1 = n % 10; //by this we are getting the last digit of number as remainder.
     n = n/10; //here we are reducing the original number by one digit.
     
      d2 = n % 10;
     n = n/10;
     
      d3 = n % 10;
     n = n/10;
     
      d4 = n % 10;
     n = n/10;
     
     
      d5 = n % 10;
       
       
       reverse= d1 * 10000 + d2 * 1000 + d3 * 100 + d4 * 10 + d5;
       
       printf("Reversed five digit number is %d" , reverse);
       


    return 0;
    
}

